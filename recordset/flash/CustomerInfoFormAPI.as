import mx.remoting.Service;import mx.rpc.RelayResponder;import mx.rpc.FaultEvent;import mx.rpc.ResultEvent;import mx.remoting.PendingCall;import mx.remoting.RecordSet;import mx.controls.DataGrid;import mx.controls.gridclasses.DataGridColumn;import mx.controls.ComboBox;import mx.controls.TextArea;import mx.remoting.DataGlue;import mx.screens.Form;import mx.controls.TextInput;import mx.controls.Label;import mx.controls.Loader;import mx.controls.Alert;class CustomerInfoFormAPI extends Form {		function CustomerInfoFormAPI() {		super();		mx.remoting.debug.NetDebug.initialize(); // initialize the NCD		initialized = false;		custService = new Service(								  "http://localhost:8000",								  null,								  "service",								  null,								  null);		// load category combo		var pc:PendingCall = custService.getCategories(); // get all categories		totalSales_label.setStyle( "textAlign", "right" );		pc.responder = new RelayResponder( this, "onCategoryData", "onCategoryDataFault" );		addEventListener( "reveal", onReveal );	}		// initializes the display	function onReveal():Void {		if( !initialized ) {			var col:DataGridColumn = new DataGridColumn( "ID" );			customers_grd.addColumn( col );			col = new DataGridColumn( "Active" );			col.width = 80;			customers_grd.addColumn( col );			col = new DataGridColumn( "Name" );			col.width = 250;			customers_grd.addColumn( col );			col = new DataGridColumn( "TotalSales" );			col.width = 80;			col.textAlign = "right";			customers_grd.addColumn( col );			customers_grd.addEventListener( "change", onCustGrid_Change );			// setup remaining			totalRec_txt.setStyle( "textAlign", "right" ); //set the textField to Left Align			totalSales_label.setStyle( "textAlign", "right" );			initialized = true;		}	}		// updateDetails will update the details TextArea, textInput and the 	// Loader present on the screen changes will be updated when the selection 	// in DataGrid changes	function updateDetails():Void {		var curItem:Object = customers_grd.selectedItem;		custInfo_txt.text = curItem.Details;		totalSales_label.text = curItem.TotalSales;		custLogo_ldr.load( curItem.Logo );	}		// gets the customer data for the current category selected	function refreshCustomerData():Void {		var pc:PendingCall = custService.getCustomers( custCat_cmbo.selectedItem.data );		pc.responder = new RelayResponder( this, "onCustomerData", "onCustomerDataFault" );	}		// updates the detail section when a new item is selected in the grid	function onCustGrid_Change( eventObj: Object ):Void {		mx.remoting.debug.NetDebug.trace({ level:"Debug", message:"onCustGrid_Change" });		eventObj.target._parent.updateDetails();	}		// updates the grid with the new customers based on the category selected	function onCustCat_Change( eventObj: Object ):Void {		eventObj.target._parent.refreshCustomerData();	}	// handles the results from the getCategories() call	function onCategoryData( re:ResultEvent ):Void {		mx.remoting.debug.NetDebug.trace({level:"Debug", message:"onCategoryData" });		// use data glue to remap the fields so that label = name field and data = id field		DataGlue.bindFormatStrings( custCat_cmbo, re.result, "#Name#", "#ID#" );		custCat_cmbo.addEventListener( "change", onCustCat_Change );		refreshCustomerData();	}		// handles the results from the request to getCustomers() method of the service	function onCustomerData( re:ResultEvent ):Void {		// update customer grid		var rs:mx.remoting.RecordSet = mx.remoting.RecordSet( re.result );		rs.setDeliveryMode( "onDemand" );		totalRec_txt.text = String( rs.length );		customers_grd.dataProvider = rs;		customers_grd.selectedIndex = 0;		updateDetails();	}		// handles the display of the fault information related to the customer data request 	// to the user	function onCustomerDataFault( fault:FaultEvent ):Void {		// notify the user of the problem		var error:String = "Couldn't retrieve customer data: \n";		for (var d in fault.fault) {			error += fault.fault[d] + "\n";		}		Alert.show( error, "Error", Alert.OK, this );	}		// handles the display of the fault information related to the category data request	// to the user	function onCategoryDataFault( fault:FaultEvent ):Void {		// notify the user of the problem		var error:String = "Couldn't retrieve customer data: \n";		for (var d in fault.fault) {			error += fault.fault[d] + "\n";		}		Alert.show( error, "Error", Alert.OK, this );	}		private var custService:Service;	private var customers_grd:DataGrid;	private var custCat_cmbo:ComboBox;	private var custInfo_txt:TextArea;	private var totalRec_txt:TextInput;	private var totalSales_label:Label;	private var custLogo_ldr:Loader;	private var initialized:Boolean;}